package models.managers;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PrintStream;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map.Entry;
import java.util.Set;

import models.Project;
import models.networkcomponents.Node;
import models.networkcomponents.WirelessNetwork;
import models.networkcomponents.WirelessNode;
import models.networkcomponents.events.AppEvent;
import models.networkcomponents.events.NodeEvent;
import models.networkcomponents.features.Area;
import models.networkcomponents.features.GraphicLabel;
import models.networkcomponents.features.Label;
import models.networkcomponents.protocols.ApplicationProtocol;
import models.networkcomponents.protocols.TransportProtocol;
import nu.xom.Attribute;
import nu.xom.Builder;
import nu.xom.Comment;
import nu.xom.Document;
import nu.xom.Element;
import nu.xom.Elements;
import nu.xom.ParsingException;
import nu.xom.Serializer;
import nu.xom.ValidityException;
import controllers.helpers.Helper;

/**
 * Provide methods for parsing xml to Objects of program
 * @author leecom
 *
 */
public class Parser {
	public static final int XML = 0, TXT = 1;
	
	/**
	 * Save project to the output xml file
	 * @param project
	 * @return
	 * @throws IOException 
	 */
	static public boolean saveProject(Project project) throws IOException {	
		String path = project.getPath();
		Document doc = saveProjectToDocument(project);
		
		// save the document
		return saveXml(doc, path);
	}
	
	static public Document saveProjectToDocument(Project project) {
		WirelessNetwork network = project.getNetwork();
		
		// creates new document
		Element eProject = new Element("project");
		Document doc = new Document(eProject);
		
		// adds comment
		Comment comment = new Comment("Generated by WiSSim Editor version 1.0");
		doc.insertChild(comment, 0);
		
		// adds project info
		Element pinfo = new Element("project-info");
		DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
		Date date = new Date();
		project.setLastSavedDate(date);
		Attribute createdDate = new Attribute("create-date", dateFormat.format(project.getCreatedDate()));
		Attribute lastSavedDate = new Attribute("last-save-date", dateFormat.format(date));
		pinfo.addAttribute(createdDate);
		pinfo.addAttribute(lastSavedDate);
		eProject.appendChild(pinfo);
		
		// adds network initialization info
		Element ninfo = new Element("network-info");
		ninfo.addAttribute(new Attribute("name", network.getName() + ""));		
		ninfo.addAttribute(new Attribute("width", network.getWidth() + ""));
		ninfo.addAttribute(new Attribute("length", network.getLength() + ""));
		ninfo.addAttribute(new Attribute("time", network.getTime() + ""));
		eProject.appendChild(ninfo);		
		
		// adds nodes info
		Element nodesElement;
		nodesElement = new Element("nodes");
		ninfo.appendChild(nodesElement);
		
		Element nodeElement;
		for (Node n : network.getNodeList()) {
			nodeElement = new Element("node");
			nodeElement.addAttribute(new Attribute("id", n.getId() + ""));
			nodeElement.addAttribute(new Attribute("name", n.getName() + ""));
			
			if (n instanceof WirelessNode) {
				WirelessNode wn = (WirelessNode) n;
				
				nodeElement.addAttribute(new Attribute("x", wn.getX() + ""));
				nodeElement.addAttribute(new Attribute("y", wn.getY() + ""));
				nodeElement.addAttribute(new Attribute("range", wn.getRange() + ""));
				
				if (wn.getEventList().size() > 0) {
					
					Element nodeEvents = new Element("node-events");
					nodeElement.appendChild(nodeEvents);
					
					for (NodeEvent e : wn.getEventList()) {
						Element nodeEvent = new Element("node-event");
						nodeEvent.addAttribute(new Attribute("type", e.getType() + ""));
						nodeEvent.addAttribute(new Attribute("time", e.getRaisedTime() + ""));
						
						nodeEvents.appendChild(nodeEvent);
					}
				}
			}
			
			Set<Entry<String, String>> set;
			Iterator<Entry<String, String>> iterator;
			Entry<String, String> e;
			Element params;
			if (n.getTransportPrototolList().size() > 0) {
				Element transportProtocols = new Element("transport-protocols");
				nodeElement.appendChild(transportProtocols);
				
				for (TransportProtocol tp : n.getTransportPrototolList()) {
					Element transportProtocol = new Element("transport-protocol");
					transportProtocol.addAttribute(new Attribute("name", tp.getName()));
					transportProtocol.addAttribute(new Attribute("type", tp.getType() + ""));

					// add params
					set = tp.getParameters().entrySet();
					
					if (set.size() > 0) {
						params = new Element("params");
						transportProtocol.appendChild(params);
						
						iterator = set.iterator();
						while (iterator.hasNext()) {						
							e = iterator.next();
							
							Element param = new Element("param");
							param.addAttribute(new Attribute("property", e.getKey()));
							param.addAttribute(new Attribute("value", e.getValue()));
							params.appendChild(param);
						}
					}
					
					// add apps				
					List<ApplicationProtocol> appList = tp.getAppList();
					if (appList.size() > 0) {
						Element apps = new Element("apps");
						transportProtocol.appendChild(apps);
						
						for (ApplicationProtocol ap : appList) {
							Element applicationProtocol = new Element("app");
							applicationProtocol.addAttribute(new Attribute("name", ap.getName()));
							applicationProtocol.addAttribute(new Attribute("dest-id", ap.getDestNode().getId() + ""));
							applicationProtocol.addAttribute(new Attribute("type", ap.getType() + ""));
							
							// add app params
							set = ap.getParameters().entrySet();					
							if (set.size() > 0) {
								params = new Element("params");
								applicationProtocol.appendChild(params);
								
								iterator = set.iterator();
								while (iterator.hasNext()) {						
									e = iterator.next();
									
									Element param = new Element("param");
									param.addAttribute(new Attribute("property", e.getKey()));
									param.addAttribute(new Attribute("value", e.getValue()));
									params.appendChild(param);
								}
							}
							
							// add app events
							List<AppEvent> eventList = ap.getEventList();
							if (eventList.size() > 0) {
								Element appEvents = new Element("app-events");
								applicationProtocol.appendChild(appEvents);
								
								for (AppEvent ae : eventList) {
									Element appEvent = new Element("app-event");
									
									appEvent.addAttribute(new Attribute("type", ae.getType() + ""));
									appEvent.addAttribute(new Attribute("time", ae.getRaisedTime() + ""));
									
									appEvents.appendChild(appEvent);
								}
							}
							
							apps.appendChild(applicationProtocol);
						}
					}
					
					transportProtocols.appendChild(transportProtocol);
				}
			}
			
			nodesElement.appendChild(nodeElement);
		}
		
		// adds label info
		Element labelsElement;
		labelsElement = new Element("labels");
		ninfo.appendChild(labelsElement);
		
		Element labelElement;
		for (Label l : project.getLabelList()) {
			labelElement = new Element("label");
			labelElement.addAttribute(new Attribute("uid", l.getUid()));
			labelElement.addAttribute(new Attribute("name", l.getName()));
			
			java.awt.Color color = ((GraphicLabel)l).getColor();
			String hex = Helper.rgb2Hex(color.getRed(), color.getGreen(), color.getBlue());
			labelElement.addAttribute(new Attribute("color", hex));
			labelsElement.appendChild(labelElement);
			
			Element nodesLabelElement = new Element("nodes");
			labelElement.appendChild(nodesLabelElement);
			
			Element nodeLabelElement;
			for (Node n: l.getNodeList()) {
				nodeLabelElement = new Element("node");
				nodeLabelElement.addAttribute(new Attribute("id", n.getId() + ""));
				nodesLabelElement.appendChild(nodeLabelElement);
			}
		}
		
		// adds obstacles info
		Element obstaclesElement;
		obstaclesElement = new Element("obstacles");
		ninfo.appendChild(obstaclesElement);
		
		Element obstacleElement;
		for (Area obs : project.getObstacleList()) {
			obstacleElement = new Element("obstacle");
			
			Element pointElement;
			for (int i = 0; i < obs.npoints; i++) {
				pointElement = new Element("point");
				pointElement.addAttribute(new Attribute("x", obs.xpoints[i] + ""));
				pointElement.addAttribute(new Attribute("y", obs.ypoints[i] + ""));
				obstacleElement.appendChild(pointElement);
			}
			
			obstaclesElement.appendChild(obstacleElement);
		}
		
		Element config = new Element("project-config");
		
		Element eNodeRange = new Element("node-range");
		eNodeRange.appendChild(project.getNodeRange() + "");
		config.appendChild(eNodeRange);
		
		Element eQueueLength = new Element("queue-length");
		eQueueLength.appendChild(project.getQueueLength() + "");
		config.appendChild(eQueueLength);
		
		addConfigElement("routing-protocol", project.getRoutingProtocols(), project.getSelectedRoutingProtocol(), config);
		addConfigElement("transport-protocol", project.getTransportProtocols(), project.getSelectedTransportProtocol(), config);	
		addConfigElement("application-protocol", project.getApplicationProtocols(), project.getSelectedApplicationProtocol(), config);	
		addConfigElement("link-layer", project.getLinkLayers(), project.getSelectedLinkLayer(), config);	
		addConfigElement("mac", project.getMacs(), project.getSelectedMac(), config);	
		addConfigElement("channel", project.getChannels(), project.getSelectedChannel(), config);	
		addConfigElement("propagation-model", project.getPropagationModels(), project.getSelectedPropagationModel(), config);	
		addConfigElement("network-interface", project.getNetworkInterfaces(), project.getSelectedNetworkInterface(), config);	
		addConfigElement("antenna", project.getAntennas(), project.getSelectedAntenna(), config);
		addConfigElement("interface-queue", project.getInterfaceQueues(), project.getSelectedInterfaceQueue(), config);	
		
		Element eIddleEnergy = new Element("iddle-energy");
		eIddleEnergy.appendChild(project.getIddleEnergy() + "");
		config.appendChild(eIddleEnergy);
		
		Element eReceptionEnergy = new Element("reception-energy");
		eReceptionEnergy.appendChild(project.getReceptionEnergy() + "");
		config.appendChild(eReceptionEnergy);
		
		Element eTransmissionEnergy = new Element("transmission-energy");
		eTransmissionEnergy.appendChild(project.getTransmissionEnergy() + "");
		config.appendChild(eTransmissionEnergy);
		
		Element eSleepEnergy = new Element("sleep-energy");
		eSleepEnergy.appendChild(project.getSleepEnergy() + "");
		config.appendChild(eSleepEnergy);
		
		eProject.appendChild(config);
		
		return doc;		
	}
	
	static private void addConfigElement(String name, HashMap<String, HashMap<String, String>> data, String selectedData, Element eParent) {
		Element e = new Element(name + "s");
		Set<Entry<String, HashMap<String, String>>> set = data.entrySet();
		Iterator<Entry<String, HashMap<String, String>>> iterator = set.iterator();
		
		while (iterator.hasNext()) {			
			Entry<String, HashMap<String, String>> entry = (Entry<String, HashMap<String, String>>) iterator.next();
			String type = entry.getKey();
			
			Element params = new Element("params");
			
			Set<Entry<String, String>> paramSet = entry.getValue().entrySet();
			Iterator<Entry<String, String>> paramIterator = paramSet.iterator();
			
			while (paramIterator.hasNext()) {
				Entry<String, String> paramEntry = (Entry<String,String>) paramIterator.next();
				Element param = new Element("param");
				param.addAttribute(new Attribute("property", paramEntry.getKey()));
				param.addAttribute(new Attribute("value", paramEntry.getValue()));
				
				params.appendChild(param);
			}
			
			Element eData = new Element(name);
			eData.addAttribute(new Attribute("type", type));
			if (type.equals(selectedData))
				eData.addAttribute(new Attribute("default", "true"));
			
			eData.appendChild(params);
			e.appendChild(eData);
		}
		
		eParent.appendChild(e);
	}
	
	static public boolean generateNodeLocationData(Project project, String path, int mode) throws IOException {
		WirelessNetwork network = project.getNetwork();
		
		switch (mode) {
		case TXT:
			String str = "";
			
			for (Node n: network.getNodeList())
				if (n instanceof WirelessNode)
					str += n.getId() + "\t" + ((WirelessNode) n).getX() + "\t" + ((WirelessNode) n).getY() + "\r\n";
			
			return saveTxt(str, path);
		case XML:
			// create new document
			Element nodeData = new Element("nodedata");
			nodeData.addAttribute(new Attribute("project", network.getName()));
			Document doc = new Document(nodeData);		
			
			// adds comment
			Comment comment = new Comment("Generated by WiSSim Editor version 1.0");
			doc.insertChild(comment, 0);
			
			// add node data information
			for (Node n: network.getNodeList())
				if (n instanceof WirelessNode) {
					Element ndata = new Element("node");
					ndata.addAttribute(new Attribute("id", n.getId() + ""));
					ndata.addAttribute(new Attribute("x", ((WirelessNode) n).getX() + ""));
					ndata.addAttribute(new Attribute("y", ((WirelessNode) n).getY() + ""));
					nodeData.appendChild(ndata);
				}
			
			System.out.print(path);
			
			return saveXml(doc, path);
		default:
			return false;
		}
	}
	
	/**
	 * Load project from output file
	 * @param path
	 * @return
	 * @throws IOException 
	 * @throws ParsingException 
	 * @throws ValidityException 
	 */
	static public Project loadProject(String path) throws ValidityException, ParsingException, IOException {
		// parse xml file to Document Object
		Document doc = parse(path);
		
		return loadProjectFromDocument(doc, path);		
	}
	
	/**
	 * Load project from document
	 * @param doc
	 * @param path
	 * @return
	 */
	public static Project loadProjectFromDocument(Document doc, String path) {
		Element eProject = doc.getRootElement();		
		
		// load network
		Element networkInfo = eProject.getFirstChildElement("network-info");		
		String name = networkInfo.getAttributeValue("name");
		int width = Integer.parseInt(networkInfo.getAttributeValue("width"));
		int height = Integer.parseInt(networkInfo.getAttributeValue("length"));
		int time = Integer.parseInt(networkInfo.getAttributeValue("time"));
		WirelessNetwork network = new WirelessNetwork(name, time, width, height);
		
		// load nodes
		Element nodes = networkInfo.getFirstChildElement("nodes");		
		if (nodes != null) {
			Elements nodeElements = nodes.getChildElements();
			int id, x, y, range;
			
			// load node info
			for (int i = 0; i < nodeElements.size(); i++) {
				Element node = nodeElements.get(i);
				
				id = Integer.parseInt(node.getAttributeValue("id"));
				name = node.getAttributeValue("name");
				x = Integer.parseInt(node.getAttributeValue("x"));
				y = Integer.parseInt(node.getAttributeValue("y"));
				range = Integer.parseInt(node.getAttributeValue("range"));				
				WirelessNode wn = new WirelessNode(network, id, name, x, y, range);
				
				// load node events
				Element events = node.getFirstChildElement("node-events");
				int type, raisedTime;
				if (events != null) {
					Elements eventElements = events.getChildElements();
					for (int j = 0; j < eventElements.size(); j++) {
						Element event = eventElements.get(j);
						
						type = Integer.parseInt(event.getAttributeValue("type"));
						raisedTime = Integer.parseInt(event.getAttributeValue("time"));
						new NodeEvent(type, raisedTime, wn);
					}
				}
				
				// load node protocols
				Element transProtocols = node.getFirstChildElement("transport-protocols");
				String transName;
				int transType = TransportProtocol.TCP;
				if (transProtocols != null) {
					for (int j = 0; j < transProtocols.getChildElements().size(); j++) {
						Element transProtocol = transProtocols.getChildElements().get(j);
						
						transName = transProtocol.getAttributeValue("name");
						switch (transProtocol.getAttributeValue("type")) {
						case "TCP":
							transType = TransportProtocol.TCP;
							break;
						case "UDP":
							transType = TransportProtocol.UDP;
							break;
						}
						
						TransportProtocol tp = new TransportProtocol(transType, transName, wn);
						Elements params = transProtocol.getFirstChildElement("params").getChildElements();
						for (int k = 0; k < params.size(); k++) {
							Element param = params.get(k);							
							tp.addParameter(param.getAttributeValue("property"), param.getAttributeValue("value"));
						}
					}
				}
			}
			
			// load apps info
			for (int i = 0; i < nodeElements.size(); i++) {
				Element node = nodeElements.get(i);
				int id1 = Integer.parseInt(node.getAttributeValue("id"));
				WirelessNode wn = (WirelessNode) network.getNodeById(id1);
				
				Element transProtocols = node.getFirstChildElement("transport-protocols");
				if (transProtocols != null) {
					for (int j = 0; j < transProtocols.getChildElements().size(); j++) {
						Element transProtocol = transProtocols.getChildElements().get(j);
						TransportProtocol tp = null;
						for (TransportProtocol t : wn.getTransportPrototolList()) {
							if (t.getName().equals(transProtocol.getAttributeValue("name"))) {
								tp = t;
								break;
							}
						}
						
						Elements apps = transProtocol.getFirstChildElement("apps").getChildElements();
						for (int k = 0; k < apps.size(); k++) {
							Element appProtocol = apps.get(k);
							
							int id2 = Integer.parseInt(appProtocol.getAttributeValue("dest-id"));
							int appType = ApplicationProtocol.CBR;
							switch (appProtocol.getAttributeValue("type")) {
							case "CBR":
								appType = ApplicationProtocol.CBR;
								break;
							case "VBR":
								appType = ApplicationProtocol.VBR;
								break;
							case "FTP":
								appType = ApplicationProtocol.FTP;
								break;
							case "PARETO":
								appType = ApplicationProtocol.PARETO;
								break;
							case "TELNET":
								appType = ApplicationProtocol.TELNET;
								break;
							}

							new ApplicationProtocol(
									appType, 
									appProtocol.getAttributeValue("name"),
									tp, 
									network.getNodeById(id2));
						}
					}
				}
			}
		}
		
		
		// load project and its info
		Project project = new Project(path, network);		
		Element projectInfo = eProject.getFirstChildElement("project-info");
		try {
			project.setCreatedDate(new SimpleDateFormat("yyyy/dd/MM hh:mm:ss").parse(projectInfo.getAttributeValue("create-date")));
			project.setLastSavedDate(new SimpleDateFormat("yyyy/dd/MM hh:mm:ss").parse(projectInfo.getAttributeValue("last-save-date")));
		} catch (ParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		// load labels
		Element labels = networkInfo.getFirstChildElement("labels");
		if (labels != null) {
			Elements eLabels = labels.getChildElements();
			if (eLabels != null) {				
				for (int i = 0; i < eLabels.size(); i++) {
					Element label = eLabels.get(i);

					GraphicLabel gLabel = new GraphicLabel(
							label.getAttributeValue("name"), 
							Helper.hex2Rgb(label.getAttributeValue("color")));
					
					Elements eNodes = label.getFirstChildElement("nodes").getChildElements();
					if (eNodes != null) {
						for (int j = 0; j < eNodes.size(); j++) {
							gLabel.add(network.getNodeById(Integer.parseInt(eNodes.get(j).getAttributeValue("id"))));
						}
					}
					
					project.getLabelList().add(gLabel);
				}
			}
		}
		
		
		// load obstacles
		Element obstacles = networkInfo.getFirstChildElement("obstacles");
		if (obstacles != null) {
			Elements eObstacles = obstacles.getChildElements();
			if (eObstacles != null) {
				for (int i = 0; i < eObstacles.size(); i++) {
					Element obstacle = eObstacles.get(i);
					Area area = new Area();
					
					Elements points = obstacle.getChildElements();
					for (int j = 0; j < points.size(); j++) {
						Element point = points.get(j);
						area.addPoint(Integer.parseInt(point.getAttributeValue("x")), Integer.parseInt(point.getAttributeValue("y")));
					}
					
					project.addObstacle(area);
				}
			}
		}
		
		// load project-config
		Element eProjectConfig = eProject.getFirstChildElement("project-config");
		
		Element eNodeRange = eProjectConfig.getFirstChildElement("node-range");
		project.setNodeRange(Integer.parseInt(eNodeRange.getValue()));
		
		Element eQueueLength = eProjectConfig.getFirstChildElement("queue-length");
		project.setQueueLength(Integer.parseInt(eQueueLength.getValue()));
		
		StringBuilder builder = new StringBuilder();
		project.setRoutingProtocols(loadConfigElement(eProjectConfig.getFirstChildElement("routing-protocols"), builder));
		project.setSelectedRoutingProtocol(builder.toString());
		project.setTransportProtocols(loadConfigElement(eProjectConfig.getFirstChildElement("transport-protocols"), builder));
		project.setSelectedTransportProtocol(builder.toString());
		project.setApplicationProtocols(loadConfigElement(eProjectConfig.getFirstChildElement("application-protocols"), builder));
		project.setSelectedApplicationProtocol(builder.toString());
		project.setLinkLayers(loadConfigElement(eProjectConfig.getFirstChildElement("link-layers"), builder));
		project.setSelectedLinkLayer(builder.toString());
		project.setMacs(loadConfigElement(eProjectConfig.getFirstChildElement("macs"), builder));
		project.setSelectedMac(builder.toString());
		project.setChannels(loadConfigElement(eProjectConfig.getFirstChildElement("channels"), builder));
		project.setSelectedChannel(builder.toString());
		project.setPropagationModels(loadConfigElement(eProjectConfig.getFirstChildElement("propagation-models"), builder));
		project.setSelectedPropagationModel(builder.toString());
		project.setNetworkInterfaces(loadConfigElement(eProjectConfig.getFirstChildElement("network-interfaces"), builder));
		project.setSelectedNetworkInterface(builder.toString());
		project.setAntennas(loadConfigElement(eProjectConfig.getFirstChildElement("antennas"), builder));
		project.setSelectedAntenna(builder.toString());
		project.setInterfaceQueues(loadConfigElement(eProjectConfig.getFirstChildElement("interface-queues"), builder));
		project.setSelectedInterfaceQueue(builder.toString());		
		
		Element eIddleEnergy = eProjectConfig.getFirstChildElement("iddle-energy");
		project.setIddleEnergy(Double.parseDouble(eIddleEnergy.getValue()));
		
		Element eReceptionEnergy = eProjectConfig.getFirstChildElement("reception-energy");
		project.setReceptionEnergy(Double.parseDouble(eReceptionEnergy.getValue()));
		
		Element eTransmissionEnergy = eProjectConfig.getFirstChildElement("transmission-energy");
		project.setTransmissionEnergy(Double.parseDouble(eTransmissionEnergy.getValue()));
		
		Element eSleepEnergy = eProjectConfig.getFirstChildElement("sleep-energy");
		project.setSleepEnergy(Double.parseDouble(eSleepEnergy.getValue()));
		
		return project;
	}
	
	private static HashMap<String, HashMap<String, String>> loadConfigElement(Element e, StringBuilder builder) {
		Elements elements = e.getChildElements();
		HashMap<String, HashMap<String, String>> hashMap = new HashMap<>();
		builder.delete(0, builder.length());
		
		for (int i = 0; i < elements.size(); i++) {
			Element eData = elements.get(i);
			String type = eData.getAttributeValue("type");
			if (eData.getAttributeValue("default") != null && eData.getAttributeValue("default").equals("true"))
				builder.append(type);
			
			Elements params = eData.getFirstChildElement("params").getChildElements();
			HashMap<String, String> pHashMap = new HashMap<>();
			for (int j = 0; j < params.size(); j++) {
				Element param = params.get(j);				
				pHashMap.put(param.getAttributeValue("property"), param.getAttributeValue("value"));
			}
			
			hashMap.put(type, pHashMap);
		}
		
		return hashMap;
	}
	
	/**
	 * Parse xml file to Document Object
	 * @param path
	 * @return
	 * @throws ValidityException
	 * @throws ParsingException
	 * @throws IOException
	 */
	static public Document parse(String path) throws ValidityException, ParsingException, IOException {
		InputStream input;
		Document doc = null;
		
		input = new FileInputStream(path);
        Builder parser = new Builder();
		doc = parser.build(input);			

		return doc;
	}
	
	/**
	 * Save Document Object to xml file
	 * @param doc
	 * @param path
	 * @return
	 * @throws IOException
	 */
	static public boolean saveXml(Document doc, String path) throws IOException {		
		OutputStream output = new FileOutputStream(path);
        Serializer serializer = new Serializer(output, "ISO-8859-1");
        serializer.setIndent(4);
        serializer.write(doc);
        output.close();
        
        return true;
	}
	
	static public boolean saveTxt(String str, String path) throws FileNotFoundException {
		PrintStream out = null;
		try {
		    out = new PrintStream(new FileOutputStream(path));
		    out.print(str);
		}
		finally {
		    if (out != null) out.close();
		}	
		
		return true;
	}
}
